function ImgLazyLoad() {
    var e = document.querySelectorAll("img"), t = new IntersectionObserver((e, s) => {
        e.forEach(e => {
            var t;
            e.isIntersecting && ((t = e.target).src = t.src.replace("_T.", "_M."), 
            s.unobserve(e.target));
        });
    }, {});
    e.forEach(e => {
        t.observe(e);
    });
}

ImgLazyLoad();

function COPY(e) {
    navigator.clipboard.writeText(e).then(() => {
        Notify('Notice', 'Copied to clipboard');
    }, () => {
        Notify('Error', 'Failed to Copy !');
    });
}

function loadNotify() {
    if (QS("#toast") === null) {
        QS("body").insertAdjacentHTML("beforeend", '<div id="toast" class="toast-container position-fixed bottom-0 end-0 p-3"><div class="toast" role="alert" aria-live="assertive" aria-atomic="true"><div class="toast-header"><strong id="notifyTitle" class="me-auto">Notify</strong><small>Just Now</small><button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button></div><div id="notifyMsg" class="toast-body">Text Copied !</div></div></div>');
    }
}

function Notify(e = {
    title: "Notify",
    txt: "Message."
}) {
    loadNotify();
    let t;
    try {
        t = JSON.parse(e.txt);
    } catch {
        t = {
            result: e.txt
        };
    }
    if (Object.keys(t).length > 0) {
        document.querySelector('#notifyTitle').innerHTML = typeof e.title == 'undefined' ? "Notify" : e.title;
        document.querySelector('#notifyMsg').innerHTML = t.result;
    } else {
        document.querySelector('#notifyTitle').innerHTML = !e.title ? "Notify" : e.title;
        document.querySelector('#notifyMsg').innerHTML = e.txt;
    }
    new bootstrap.Toast(document.querySelector('.toast'), {
        animation: true,
        autohide: true,
        delay: 5e3
    }).show();
}

function marginCalc(l, c, u, f, d, e, p, S, m, b, y) {
    $(document).ready(function() {
        let e = $(l).val();
        let t = $(u).val().replace(" ", "").toUpperCase();
        let n = $(d).val();
        let o = $(p).val();
        let a = $(S).val();
        let i = new XMLHttpRequest();
        let r;
        let s;
        $(u).val(t);
        if (y == 'binance' && e == 'usd-m') {
            s = "https://fapi.binance.com/fapi/v1/ticker/price?symbol=" + t;
        }
        if (y == 'binance' && e == 'coin-m') {
            s = "https://dapi.binance.com/dapi/v1/ticker/price?symbol=" + t;
        }
        if (y == 'bybit' && e == 'usd-m') {
            s = "https://api.bybit.com/public/linear/index-price-kline?interval=1&limit=1&from=<?=time()-60?>&symbol=" + t;
        }
        if (y == 'bybit' && e == 'coin-m') {
            s = "https://api.bybit.com/v2/public/index-price-kline?interval=1&limit=1&from=<?=time()-60?>&symbol=" + t;
        }
        if (!('withCredentials' in i)) i = new XDomainRequest();
        i.open('GET', s);
        i.send();
        i.onload = function() {
            if (i.status == 400) {
                $(c).css("color", "red");
                $(Symbol_label).css("color", "red");
                if (e == 'coin-m') {
                    if (!t.match(/USD/)) {
                        $(f).text("Try \"" + t + "USD\" ?");
                    } else if (t.match(/USDT\b/) || t.match(/USDC\b/) || t.match(/BUSD\b/)) {
                        trySym = t.substr(0, t.length - 4);
                        $(Symbol_label).text("Try \"" + trySym + "USD\" ?");
                    }
                }
                if (e == 'usd-m') {
                    if (!t.match(/USD/)) {
                        $(Symbol_label).text("Try \"USDT\" ?");
                    } else if (t.match(/USD\b/)) {
                        $(Symbol_label).text("Try \"USDT\" ?");
                    } else if (!t.match(/\b1000/) && (t.match(/USDT\b/) || t.match(/USDC\b/) || t.match(/BUSD\b/))) {
                        $(Symbol_label).text("Try \"1000" + t + "\" ?");
                    }
                }
            } else if (i.status == 200) {
                $(c).css("color", "");
                $(Symbol_label).css("color", "");
                $(Symbol_label).text("Symbol");
                if (y == 'binance') {
                    r = Number(JSON.parse(i.responseText)['price']);
                }
                if (y == 'bybit' && e == 'usd-m') {
                    r = Number(JSON.parse(i.responseText)['price']);
                }
                if (y == 'bybit' && e == 'coin-m') {
                    r = Number(JSON.parse(i.responseText)['price']);
                }
            }
            let s = false;
            let l = false;
            if (o == 'qty') {
                let e = (a * r).toFixed(2);
                let t = (a / n).toFixed(2);
                if (e >= 15) {
                    $(b).html("USD = " + e + '<br>COST = ' + t + baseAsset);
                } else if (e < 15) {
                    l = true;
                    s = true;
                } else {
                    $(b).text('require valid Symbol !');
                    l = true;
                    s = true;
                }
            }
            if (o == 'usd') {
                let e = (1 / r * a).toFixed(4);
                let t = (e / n).toFixed(4);
                if (a >= 15) {
                    $(b).html("QTY = " + e + '<br>COST = ' + t + baseAsset);
                } else if (a < 15) {
                    l = true;
                    s = true;
                } else {
                    $(b).text('require valid Symbol !');
                    l = true;
                    s = true;
                }
            }
            if (o == 'percent') {
                $(b).html("= " + a + '%');
                if (a >= .01) {} else if (a < .01) {
                    l = true;
                    s = true;
                } else {
                    $(b).text('require valid Symbol !');
                    l = true;
                    s = true;
                }
            }
            if (s) {
                $(m).css("color", "red");
            } else {
                $(m).css("color", "");
            }
            if (l) {
                $(b).css("color", "red");
            } else {
                $(b).css("color", "");
            }
        };
    });
}

const QS_all_form = QS('form');

if (QS_all_form) {
    const inputs = QS_all_form.querySelectorAll('input');
    const KEYBOARDS = {
        backspace: 8,
        arrowLeft: 37,
        arrowRight: 39
    };
    QS_all_form.addEventListener('input', handleInput);
    inputs[0].addEventListener('paste', handlePaste);
    inputs.forEach(e => {
        e.addEventListener('focus', e => {
            setTimeout(() => {
                e.target.select();
            }, 0);
        });
        e.addEventListener('keydown', e => {
            switch (e.keyCode) {
              case KEYBOARDS.backspace:
                handleBackspace(e);
                break;

              case KEYBOARDS.arrowLeft:
                handleArrowLeft(e);
                break;

              case KEYBOARDS.arrowRight:
                handleArrowRight(e);
                break;

              default:
            }
        });
    });
}

function handleInput(e) {
    const t = e.target;
    const s = t.nextElementSibling;
    if (s && t.value) {
        s.focus();
        if (s.value) {
            s.select();
        }
    }
}

function handlePaste(e) {
    e.preventDefault();
    const s = e.clipboardData.getData('text');
    inputs.forEach((e, t) => {
        e.value = s[t] || '';
    });
}

function handleBackspace(e) {
    const t = e.target;
    if (t.value) {
        t.value = '';
        return;
    }
    t.previousElementSibling.focus();
}

function handleArrowLeft(e) {
    const t = e.target.previousElementSibling;
    if (!t) return;
    t.focus();
}

function handleArrowRight(e) {
    const t = e.target.nextElementSibling;
    if (!t) return;
    t.focus();
}

function QS(e) {
    return document.querySelector(e);
}

function hide(e) {
    QS(e).style.display = "none";
}

function show(e) {
    QS(e).style.display = "block";
}

function ucfirst(e) {
    return e.charAt(0).toUpperCase() + e.slice(1);
}

function SetSuccess(e, t = null) {
    QS(e).style.color = "";
    if (t != null) {
        QS(e).innerHTML = t;
    }
}

function SetError(e, t = null) {
    QS(e).style.color = "red";
    if (t != null) {
        QS(e).innerHTML = t;
    }
}

function peekPass(e) {
    let t = QS(e);
    if (t.type == "password") {
        t.type = "text";
    } else {
        t.type = "password";
    }
}

function hitEnter(e, t) {
    QS(e).addEventListener("keypress", function(e) {
        if (e.key === "Enter") {
            try {
                QS(t).click();
            } catch {
                QS(t).select();
            }
        }
    });
}

function API_Public(e, t = null, s = null) {
    const l = new XMLHttpRequest();
    l.open("get", e);
    l.send();
    l.onabort = function() {
        console.warn("** Request ABORT **");
        alert("** Request ABORT **");
    };
    l.onerror = function() {
        console.warn("** Connection ERROR **");
        alert("** Connection ERROR **");
    };
    l.onload = function() {
        let e = l.getResponseHeader('Content-Type');
        if (e == 'application/json') {
            let e = JSON.parse(l.responseText);
            if (499 >= l.status && l.status >= 400) {
                if (s == null) {
                    console.warn("** Public_Abort-Json-No Callback **");
                }
                if (s != null) {
                    console.warn("** Public_Abort-Json-Callback **");
                    s(e['result']);
                }
            } else if (299 >= l.status && l.status >= 200) {
                if (t == null) {
                    console.warn("** Public_Success-Json-No Callback **");
                }
                if (t != null) {
                    console.warn("** Public_Success-Json-Callback **");
                    t(e['result']);
                }
            } else {
                console.warn("Undefine Status Code : " + l.status);
            }
        } else if (e != 'application/json') {
            if (499 >= l.status && l.status >= 400) {
                if (s == null) {
                    console.warn("** Public_Abort-Text-No Callback **");
                }
                if (s != null) {
                    console.warn("** Public_Abort-Text-Callback **");
                    s(l.responseText);
                }
            } else if (299 >= l.status && l.status >= 200) {
                if (t == null) {
                    console.warn("** Public_Success-Text-No Callback **");
                }
                if (t != null) {
                    console.warn("** Public_Success-Text-Callback **");
                    s(l.responseText);
                }
            } else {
                console.warn("Undefine Status Code : " + l.status);
            }
        }
    };
}

function API_Private(e = null, s = null, t = null, l = null, n = console.warn, o = console.warn) {
    l.pass = t;
    a();
    function a() {
        const t = new XMLHttpRequest();
        t.open("post", e);
        t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        t.setRequestHeader("X-PRIVATE-UID", s);
        t.send(typeof l === 'object' ? new URLSearchParams(l) : l);
        t.onabort = function() {
            console.warn("** API_Private ABORT **");
            alert("** API_Private ABORT **");
        };
        t.onerror = function() {
            console.warn("** API_Private ERROR **");
            alert("** API_Private ERROR **");
        };
        t.onload = function() {
            let e = t.getResponseHeader('Content-Type');
            if (e == 'application/json') {
                let e = JSON.parse(t.responseText);
                if (499 >= t.status && t.status >= 400) {
                    if (o == null) {
                        console.warn("** Private_Abort-Json-NoCallback **");
                    }
                    if (o != null) {
                        console.warn("** Private_Abort-Json-Callback **");
                        o(e);
                    }
                } else if (299 >= t.status && t.status >= 200) {
                    if (n == null) {
                        console.warn("** Private_Success-Json-NoCallback **");
                    }
                    if (n != null) {
                        console.warn("** Private_Success-Json-Callback **");
                        n(e);
                    }
                } else {
                    console.warn("Undefine Status Code : " + t.status);
                }
            } else if (e != 'application/json') {
                if (299 >= t.status && t.status >= 200) {
                    if (o == null) {
                        console.warn("** Private_Abort-Text-NoCallback **");
                    }
                    if (o != null) {
                        console.warn("** Private_Abort-Text-Callback **");
                        o(t.responseText);
                    }
                } else if (499 >= t.status && t.status >= 400) {
                    if (n == null) {
                        console.warn("** Private_Success-Text-No Callback **");
                    }
                    if (n != null) {
                        console.warn("** Private_Success-Text-Callback **");
                        n(t.responseText);
                    }
                } else {
                    console.warn("Undefine Status Code : " + t.status);
                }
            }
        };
    }
}

var user = null;

function rememberme() {
    var e = localStorage.getItem('remember');
    if (localStorage.getItem('user') != null) {
        user = atob(localStorage.getItem('user'));
    } else {
        user = null;
    }
    if (user != null && e) {
        QS("#mail").defaultValue = user;
        QS("#remember").checked = e;
    }
}

function LoginConfig(s, l) {
    let e = false;
    let t = false;
    let n = QS("#mail").value;
    let o = QS("#pass").value;
    let a = QS("#o1").value + QS("#o2").value + QS("#o3").value + QS("#o4").value + QS("#o5").value + QS("#o6").value;
    let i = QS("#mailcode").value;
    let r = QS("#remember").checked;
    if (n.includes("@" && ".com")) {
        SetSuccess("#loginUserErr");
        e = true;
    } else {
        SetError("#loginUserErr");
        e = false;
    }
    if (o.length >= 8 && o.length <= 64 && o.match(/[a-z]+/) != null && o.match(/[A-Z]+/) != null && o.match(/[0-9]+/) != null) {
        SetSuccess("#loginPassErr");
        t = true;
    } else {
        SetError("#loginPassErr");
        t = false;
    }
    if (e && t) {
        localStorage.setItem('remember', r);
        let t = new XMLHttpRequest();
        let e = null;
        if (QS("#secret") != null) {
            e = "mail=" + n + "&auth=" + o + "&otp=" + a + "&secret=" + QS("#secret").value;
        } else {
            e = "mail=" + n + "&auth=" + o + "&otp=" + a + "&mailcode=" + i;
        }
        t.open("POST", s);
        t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        t.send(e);
        t.onload = function() {
            if (t.status == 429) {
                QS("#LoginRespone").style.color = "red";
                QS("#LoginRespone").innerHTML = "Login attempts limited, Please try again later";
                Notify({
                    txt: "Login attempts limited, Please try again later"
                });
                return;
            }
            if (t.getResponseHeader('Content-Type') == "application/json") {
                let e = JSON.parse(t.responseText);
                switch (t.status) {
                  case 400:
                    QS("#LoginRespone").style.color = "red";
                    QS("#LoginRespone").innerHTML = e.error;
                    break;

                  case 202:
                    QS("#LoginRespone").style.color = "red";
                    QS("#LoginRespone").innerHTML = e.error;
                    if (e.status == 203) {
                        SetError("#loginUserErr");
                        QS("#mail").classList.add("shaKe");
                        setTimeout(() => {
                            QS("#mail").classList.remove('shaKe');
                        }, 500);
                    } else if (e.status == 204) {
                        SetError("#loginPassErr");
                        QS("#pass").classList.add("shaKe");
                        setTimeout(() => {
                            QS("#pass").classList.remove('shaKe');
                        }, 500);
                    } else if (e.status == 205) {
                        QS("#LoginRespone").innerHTML = e.result;
                        QS("#login").style.display = "none";
                        QS("#MailVrfy").style.display = "block";
                    } else if (e.status > 205 && e.status < 210) {
                        QS("#login").style.display = "none";
                        QS("#Auth").style.display = "block";
                        if (e.status == 206) {
                            QS("#otp").classList.add("shaKe", "ChildbdrRed");
                            setTimeout(() => {
                                QS("#otp").classList.remove('shaKe');
                            }, 500);
                        } else if (e.status == 207) {
                            setup(e.result['qr'], e.result['secret']);
                        } else {
                            QS("#otp").classList.remove("ChildbdrRed");
                        }
                    }
                    ;
                    break;

                  case 200:
                    QS("#LoginRespone").innerHTML = e.result;
                    QS("#LoginRespone").style.color = "lime";
                    localStorage.setItem('tmpP', QS("#pass").value);
                    window.location.href = l;
                    break;

                  default:
                    QS("#LoginRespone").style.color = "black";
                    QS("#LoginRespone").innerHTML = "Unknow Error.";
                    break;
                }
            } else {
                QS("#LoginRespone").innerHTML = "Unknow Error";
            }
        };
    }
}

function RegisterConfig(e, t) {
    let s = QS("#Rname").value;
    let l = QS("#Rmail").value;
    let n = QS("#Rarea").value;
    let o = QS("#Rpass1").value;
    let a = QS("#Rpass2").value;
    let i = false;
    let r = false;
    let c = false;
    let u = false;
    if (s.match(/[A-z]+/) != null && s.length >= 2) {
        SetSuccess("#nameConfig");
        i = true;
    } else {
        SetError("#nameConfig");
        i = false;
    }
    if (l.includes("@" && ".com") && l.length >= 7) {
        SetSuccess("#mailConfig");
        r = true;
    } else if (l.length > 50) {
        SetError("#mailConfig");
        r = false;
    } else {
        SetError("#mailConfig");
        r = false;
    }
    if (n.match(/[A-z]+/) != null) {
        SetSuccess("#areaConfig");
        c = true;
    } else {
        SetError("#areaConfig");
        c = false;
    }
    if (o.length >= 8 && o.length <= 60 && o.match(/[a-z]+/) != null && o.match(/[A-Z]+/) != null && o.match(/[0-9]+/) != null && o == a) {
        SetSuccess("#passConfig");
        u = true;
    } else if (o != a) {
        SetError("#passConfig");
        u = false;
    } else {
        SetError("#passConfig");
        u = false;
    }
    if (i && r && c && u) {
        let t = new XMLHttpRequest();
        t.open("POST", e);
        t.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        t.send("mail=" + l + "&pass=" + o + "&" + "name=" + s + "&area=" + n);
        t.onload = function() {
            let e = t.getResponseHeader('Content-Type');
            if (e == "application/json") {
                let e = JSON.parse(t.responseText);
                if (499 >= t.status && t.status >= 400) {
                    QS("#RegRespone").innerHTML = e.result;
                } else if (299 >= t.status && t.status > 201) {
                    QS("#RegRespone").innerHTML = e.result;
                } else if (t.status == 200) {
                    QS("#RegRespone").innerHTML = e.result;
                    localStorage.setItem('user', btoa(l));
                    localStorage.setItem('remember', true);
                    Notify({
                        txt: e.result
                    });
                }
            } else {
                QS("#RegRespone").innerHTML = "Unknow Error";
            }
        };
    }
}

function buildCategoryTree(t, s) {
    let n = [];
    Object.keys(t).forEach(e => {
        let l = t[e];
        if (l.parent_id == s) {
            let s = t;
            l.child = {};
            Object.keys(s).forEach(e => {
                let t = s[e];
                if (t.parent_id == l.id) {
                    l.child[t.id] = t;
                    delete s[t];
                }
            });
            n.push(l);
        }
    });
    return n;
}

function switchMainCat(e, t) {
    mainCatOption = '';
    e.forEach(e => {
        mainCatOption += `<option value="${e.id}">${e.name}</option>`;
    });
    QS(t).innerHTML = mainCatOption;
    return mainCatOption;
}

function switchSubCat(e, t, s, l) {
    subCatOption = '';
    e.forEach(e => {
        if (t == e.id) {
            e.child.forEach(e => {
                subCatOption += `<option class="form-check-label" value="${e.id}" ${e.id == s ? 'selected' : ''}>${e.name}</option>`;
            });
            QS(l).innerHTML = subCatOption;
            return;
        }
    });
}

if (document.title.toLowerCase().includes('log')) {
    hitEnter("#mail", "#pass");
    hitEnter("#pass", "#MikeOxMaul");
    hitEnter("#o6", "#otpOxMaul");
    QS("#mail").addEventListener('click', () => {
        SetSuccess("#loginUserErr");
        QS("#mail").classList.remove("shaKe");
    });
    QS("#pass").addEventListener('click', () => {
        SetSuccess("#loginPassErr");
        QS("#pass").classList.remove("shaKe");
    });
    QS("#otp").addEventListener('click', () => {
        QS("#otp").classList.remove("ChildbdrRed");
    });
    QS("#otp").addEventListener('submit', e => {
        e.preventDefault();
    });
    QS("#o6").addEventListener('change', e => {
        let t = QS("#o6").value;
        if (t.length > 1) {
            QS("#o6").value = t[0];
        }
    });
}

